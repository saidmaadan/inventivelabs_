// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(USER)
  resetToken      String?
  resetTokenExpiry DateTime?
  accounts        Account[]
  sessions        Session[]
  projects        Project[]
  blogs           Blog[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  content     String    @db.Text
  image       String?
  demoUrl     String?
  githubUrl   String?
  category    String
  status      String    @default("DRAFT")
  featured    Boolean   @default(false)
  publishedAt DateTime?
  published   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tags        ProjectTag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  projects    ProjectTag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProjectTag {
  projectId   String
  tagId       String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  blogs       Blog[]
  seoTitle    String?
  seoDesc     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String    @db.Text
  content     String    @db.Text
  image       String?
  status      String    @default("DRAFT")
  featured    Boolean   @default(false)
  publishedAt DateTime?
  published   Boolean   @default(false)
  seoTitle    String?
  seoDesc     String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
  @@index([userId])
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String    @unique
  subject     String
  content     String    @db.Text
  campaigns   Campaign[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    @db.Text
  status      String    @default("DRAFT") // DRAFT, SCHEDULED, SENDING, SENT, FAILED
  sentAt      DateTime?
  scheduledAt DateTime?
  templateId  String?
  template    EmailTemplate? @relation(fields: [templateId], references: [id])
  stats       CampaignStats?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CampaignStats {
  id          String    @id @default(cuid())
  campaignId  String    @unique
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  sent        Int       @default(0)
  delivered   Int       @default(0)
  opened      Int       @default(0)
  clicked     Int       @default(0)
  failed      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Newsletter {
  id              String    @id @default(cuid())
  email           String    @unique
  firstName       String?
  lastName        String?
  active          Boolean   @default(false)
  status          String    @default("PENDING") // PENDING, ACTIVE, UNSUBSCRIBED, BOUNCED
  activationToken String?   @unique
  tokenExpiry     DateTime?
  tags            String[]  @default([])
  lastEmailSent   DateTime?
  bounceCount     Int       @default(0)
  metadata        Json?     // For storing additional data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("newsletter")
}
